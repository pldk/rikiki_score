#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pathname'

def setup
  verify_local_database_config!
  log 'üíé Installing gems'
  # Only do bundle install if the much-faster
  # bundle check indicates we need to
  system! 'bundle check || bundle install'

  log '‚òïÔ∏è Installing Node modules'
  # Only do yarn install if the much-faster
  # yarn check indicates we need to. Note that
  # --check-files is needed to force Yarn to actually
  # examine what's in node_modules
  system! 'bin/yarn check --check-files || bin/yarn install'
  system! 'yarn check --check-files || yarn install'

  log 'üöß  Dropping & recreating the development database'
  # Note that the very first time this runs, db:reset
  # will fail, but this failure is fixed by
  # doing a db:migrate
  system! 'bin/rails db:reset || bin/rails db:migrate'

  log 'üß™ Dropping & recreating the test database'
  # Setting the RAILS_ENV explicitly to be sure
  # we actually reset the test database
  system!({ 'RAILS_ENV' => 'test' }, 'bin/rails db:reset')

  log 'üí∞ Flushing all Redis databases'
  system!('bin/rails redis:reset')

  log 'üóë Ensuring binstubs are created'
  system!('bundle binstubs foreman sidekiq brakeman')

  log 'üéâ All set up! üéâ'
  log ''
  log 'To see commonly-needed commands, run:'
  log ''
  log '    bin/setup help'
  log ''
end

def help
  log 'Useful commands:'
  log ''
  log '  bin/run'
  log '     # run app locally'
  log ''
  log '  LOGRAGE_IN_DEVELOPMENT=true bin/run'
  log '     # run app locally using'
  log '     # production-like logging'
  log ''
  log '  bin/sql'
  log '     # connect to Postgres dev database'
  log ''
  log '  bin/ci'
  log '     # runs all test and checks as CI would'
  log ''
  log '  bin/rails test'
  log '     # run non-system tests'
  log ''
  log '  bin/rails test:system'
  log '     # run system tests'
  log ''
  log '  bin/setup help'
  log '     # Show this help'
  log ''
end

# start of helpers

# We don't want the setup method to have
# to do all this error checking, and we
# also want to explicitly log what we
# are executing, so we use this method
# instead of Kernel#system and friends
def system!(*args)
  log "Executing #{args}"
  if system(*args)
    log "#{args} succeeded"
  else
    log "#{args} failed"
    abort
  end
end

# It's helpful to know what messages came
# from this script, so we'll use log
# instead of puts to communicate with the user
def log(message)
  puts "[ bin/setup ] #{message}"
end

def verify_local_database_config!
  rails_root = Pathname(__FILE__).dirname / '..'

  found_at_least_one_potentially_remote_database = false

  [
    '.env.development',
    '.env.development.local',
    '.env.test',
    '.env.test.local'
  ].each do |dotenv_file|
    path_to_dotenv_file = rails_root / dotenv_file
    next unless File.exist?(path_to_dotenv_file)

    database_urls = File.read(path_to_dotenv_file).split(/\n/).reject do |line|
      line =~ /^#/
    end.select do |line|
      line =~ /^[^=]*DATABASE_URL=/
    end
    database_urls.each do |database_url|
      var_name, connection_string = database_url.split('=', 2)
      if connection_string =~ /amazonaws.com/
        found_at_least_one_potentially_remote_database = true
        log "‚ùóÔ∏è #{var_name} in #{dotenv_file} seems to point to a non-local database"
      end
    end
  end
  return unless found_at_least_one_potentially_remote_database

  log "‚ÄºÔ∏è  There was at least one configured database that's not local"
  log '‚ÄºÔ∏è  Running setup could blow away a real database. Please modify your .env files'
  exit 1
end

# end of helpers

if ARGV[0] == 'help'
  help
else
  setup
end
